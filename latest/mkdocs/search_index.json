{
    "docs": [
        {
            "location": "/", 
            "text": "ClinicalTrialSampleSize.jl\n\n\nA Julia package to calculate sample size/power for clinical trials.\n\n\n\n\nInstallation\n\n\n    Pkg.add(\nClinicalTrialSampleSize\n)\n\n\n\n\n\n\nUsage\n\n\nSee the \nUsage\n.\n\n\n\n\nDependencies\n\n\n\n\nDistributions.jl\n\n\nRoots.jl\n\n\nDocStringExtensions.jl\n\n\n\n\n\n\nSupport calculations\n\n\n\n\n\n\n\n\nSample\n\n\nTest\n\n\n\n\n\n\n\n\n\n\nOne-Sample\n\n\nMean, Proportion, Non-inferiority, Superiority, Equivalence\n\n\n\n\n\n\nTwo-Sample\n\n\nMean, Proportion, Non-inferiority, Superiority, Equivalence, McNemar's\n\n\n\n\n\n\n\n\nPart of the work refers to John Myles White's work on \nPowerAnalysis.jl\n\n\n\n\nReferences\n\n\nRosner B. 2010. \nFundamentals of Biostatistics\n. 7th Ed. Brooks/Cole\n\n\nChow S, Shao J, Wang H. 2008. \nSample Size Calculations in Clinical Research\n. 2nd Ed. Chapman \n Hall/CRC Biostatistics Series.\n\n\n\n\nIndex\n\n\nSee the \nIndex", 
            "title": "Introduction"
        }, 
        {
            "location": "/#clinicaltrialsamplesizejl", 
            "text": "A Julia package to calculate sample size/power for clinical trials.", 
            "title": "ClinicalTrialSampleSize.jl"
        }, 
        {
            "location": "/#installation", 
            "text": "Pkg.add( ClinicalTrialSampleSize )", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "See the  Usage .", 
            "title": "Usage"
        }, 
        {
            "location": "/#dependencies", 
            "text": "Distributions.jl  Roots.jl  DocStringExtensions.jl", 
            "title": "Dependencies"
        }, 
        {
            "location": "/#support-calculations", 
            "text": "Sample  Test      One-Sample  Mean, Proportion, Non-inferiority, Superiority, Equivalence    Two-Sample  Mean, Proportion, Non-inferiority, Superiority, Equivalence, McNemar's     Part of the work refers to John Myles White's work on  PowerAnalysis.jl", 
            "title": "Support calculations"
        }, 
        {
            "location": "/#references", 
            "text": "Rosner B. 2010.  Fundamentals of Biostatistics . 7th Ed. Brooks/Cole  Chow S, Shao J, Wang H. 2008.  Sample Size Calculations in Clinical Research . 2nd Ed. Chapman   Hall/CRC Biostatistics Series.", 
            "title": "References"
        }, 
        {
            "location": "/#index", 
            "text": "See the  Index", 
            "title": "Index"
        }, 
        {
            "location": "/man/usage/", 
            "text": "Usage\n\n\nThe package supports the power/sample size calculation for clinical trials.\n\n\n\n\nCreate a design object\n\n\nSample size calculations in clinical trials is specific to the design. To obtain the sample size and power, the package requires to create a design object at first, e.g.\n\n\na = OneSampleMean(10, 9)\n\n\n\n\ncreates an object for a one-sample test for mean, the first value is the true population mean (some assumed treatment effects of a new drug candidate), the second is the mean under the null (commonly a value from a historical control or some observed-evidence.)\n\n\n\n\nCalculate power\n\n\nTo calculate the power, user can use the \npower\n function. The function requires keyword arguments except for the design object. For a one-sample test for mean, we also need to know the population variance/standard deviation, sample size and desired type I error rate.\n\n\npower(a, std = 1, n = 20, alpha = 0.05)\n\n\n\n\n\n\nCalculate sample size\n\n\nTo calculate the sample size, user can use the \nsample_size\n function. Similarly, this function takes only keyword arguments except for the design object. For the same test as above, we can get the sample size when we have the desired power, type I error rate and population variance/standard deviation.\n\n\nsample_size(a, power = 0.8, std = 1, alpha = 0.05)", 
            "title": "Usage"
        }, 
        {
            "location": "/man/usage/#usage", 
            "text": "The package supports the power/sample size calculation for clinical trials.", 
            "title": "Usage"
        }, 
        {
            "location": "/man/usage/#create-a-design-object", 
            "text": "Sample size calculations in clinical trials is specific to the design. To obtain the sample size and power, the package requires to create a design object at first, e.g.  a = OneSampleMean(10, 9)  creates an object for a one-sample test for mean, the first value is the true population mean (some assumed treatment effects of a new drug candidate), the second is the mean under the null (commonly a value from a historical control or some observed-evidence.)", 
            "title": "Create a design object"
        }, 
        {
            "location": "/man/usage/#calculate-power", 
            "text": "To calculate the power, user can use the  power  function. The function requires keyword arguments except for the design object. For a one-sample test for mean, we also need to know the population variance/standard deviation, sample size and desired type I error rate.  power(a, std = 1, n = 20, alpha = 0.05)", 
            "title": "Calculate power"
        }, 
        {
            "location": "/man/usage/#calculate-sample-size", 
            "text": "To calculate the sample size, user can use the  sample_size  function. Similarly, this function takes only keyword arguments except for the design object. For the same test as above, we can get the sample size when we have the desired power, type I error rate and population variance/standard deviation.  sample_size(a, power = 0.8, std = 1, alpha = 0.05)", 
            "title": "Calculate sample size"
        }, 
        {
            "location": "/man/command/", 
            "text": "Index\n\n\n\n\nClinicalTrialSampleSize.CrossoverMean\n\n\nClinicalTrialSampleSize.McNemarProp\n\n\nClinicalTrialSampleSize.OneSampleMean\n\n\nClinicalTrialSampleSize.OneSampleMeanEqual\n\n\nClinicalTrialSampleSize.OneSampleMeanInferior\n\n\nClinicalTrialSampleSize.OneSampleMeanSuperior\n\n\nClinicalTrialSampleSize.OneSampleProp\n\n\nClinicalTrialSampleSize.OneSamplePropEqual\n\n\nClinicalTrialSampleSize.OneSamplePropInferior\n\n\nClinicalTrialSampleSize.OneSamplePropSuperior\n\n\nClinicalTrialSampleSize.TwoSampleMean\n\n\nClinicalTrialSampleSize.TwoSampleMeanEqual\n\n\nClinicalTrialSampleSize.TwoSampleMeanInferior\n\n\nClinicalTrialSampleSize.TwoSampleMeanSuperior\n\n\nClinicalTrialSampleSize.TwoSampleProp\n\n\nClinicalTrialSampleSize.TwoSamplePropEqual\n\n\nClinicalTrialSampleSize.TwoSamplePropInferior\n\n\nClinicalTrialSampleSize.TwoSamplePropSuperior\n\n\nClinicalTrialSampleSize.analytic_power\n\n\nClinicalTrialSampleSize.power\n\n\nClinicalTrialSampleSize.sample_size\n\n\n\n\n#\n\n\nClinicalTrialSampleSize.CrossoverMean\n \n \nType\n.\n\n\ntype CrossoverMean \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nCrossover design, test for mean\n\n\nConstructors\n\n\n\n\nCrossoverMean(mu1::Real, mu2::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: Mean of group 1\n\n\nmu2\n: Mean of group 2\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu2\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.McNemarProp\n \n \nType\n.\n\n\ntype McNemarProp \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nPaired sample test for proportion\n\n\nConstructors\n\n\n\n\nMcNemarProp(p1::Real, p2::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: Proportion for cell of no event - event\n\n\np2\n: Proportion for cell of event - no event\n\n\n\n\nFields\n\n\n\n\np1\n\n\np2\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.OneSampleMean\n \n \nType\n.\n\n\ntype OneSampleMean \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nOne sample test for mean\n\n\nConstructors\n\n\n\n\nOneSampleMean(mu1::Real, mu0::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: True mean\n\n\nmu0\n: Mean under null hypothesis\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu0\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.OneSampleMeanEqual\n \n \nType\n.\n\n\ntype OneSampleMeanEqual \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nOne sample equivalence test for mean\n\n\nConstructors\n\n\n\n\nOneSampleMeanEqual(mu1::Real, mu0::Real, delta::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: True mean\n\n\nmu0\n: Mean under null hypothesis\n\n\ndelta\n: Superiority Margin\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu0\n\n\ndelta\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.OneSampleMeanInferior\n \n \nType\n.\n\n\ntype OneSampleMeanInferior \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nOne sample non-inferiority test for mean\n\n\nConstructors\n\n\n\n\nOneSampleMeanInferior(mu1::Real, mu0::Real, delta::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: True mean\n\n\nmu0\n: Mean under null hypothesis\n\n\ndelta\n: Non-inferiority margin\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu0\n\n\ndelta\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.OneSampleMeanSuperior\n \n \nType\n.\n\n\ntype OneSampleMeanSuperior \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nOne sample superiority test for Mean\n\n\nConstructors\n\n\n\n\nOneSampleMeanSuperior(mu1::Real, mu0::Real, delta::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: True mean\n\n\nmu0\n: Mean under null hypothesis\n\n\ndelta\n: Superiority margin\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu0\n\n\ndelta\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.OneSampleProp\n \n \nType\n.\n\n\ntype OneSampleProp \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nOne sample test for proportion\n\n\nConstructors\n\n\n\n\nOneSampleProp(p1::Real, p0::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: True proportion\n\n\np0\n: Proportion under null hypothesis\n\n\n\n\nFields\n\n\n\n\np1\n\n\np0\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.OneSamplePropEqual\n \n \nType\n.\n\n\ntype OneSamplePropEqual \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nOne sample equivalence test for proportion\n\n\nConstructors\n\n\n\n\nOneSamplePropEqual(p1::Real, p0::Real, delta::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: True proportion\n\n\np0\n: Proportion under null hypothesis\n\n\ndelta\n: Superiority Margin\n\n\n\n\nFields\n\n\n\n\np1\n\n\np0\n\n\ndelta\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.OneSamplePropInferior\n \n \nType\n.\n\n\ntype OneSamplePropInferior \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nOne sample non-inferiority test for proportion\n\n\nConstructors\n\n\n\n\nOneSamplePropInferior(p1::Real, p0::Real, delta::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: True proportion\n\n\np0\n: Proportion under null hypothesis\n\n\ndelta\n: Non-inferiority margin\n\n\n\n\nFields\n\n\n\n\np1\n\n\np0\n\n\ndelta\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.OneSamplePropSuperior\n \n \nType\n.\n\n\ntype OneSamplePropSuperior \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nOne sample superiority test for proportion\n\n\nConstructors\n\n\n\n\nOneSamplePropSuperior(p1::Real, p0::Real, delta::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: True proportion\n\n\np0\n: Proportion under null hypothesis\n\n\ndelta\n: Superiority margin\n\n\n\n\nFields\n\n\n\n\np1\n\n\np0\n\n\ndelta\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.TwoSampleMean\n \n \nType\n.\n\n\ntype TwoSampleMean \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\ntwo sample test for mean\n\n\nConstructors\n\n\n\n\nTwoSampleMean(mu1::Real, mu2::Real, k::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: Mean of group 1\n\n\nmu2\n: Mean of group 2\n\n\nk\n: Allocation ratio of the groups, k = n(group1) / n(group 2)\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu2\n\n\nk\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.TwoSampleMeanEqual\n \n \nType\n.\n\n\ntype TwoSampleMeanEqual \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nTwo sample equivalence test for mean\n\n\nConstructors\n\n\n\n\nTwoSampleMeanEqual(mu1::Real, mu2::Real, k::Real, delta::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: Mean of group 1\n\n\nmu2\n: Mean of group 2\n\n\nk\n: Allocation ratio of the groups, k = n(group1) / n(group 2)\n\n\ndelta\n: Non-inferiority/Superiority Margin\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu2\n\n\nk\n\n\ndelta\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.TwoSampleMeanInferior\n \n \nType\n.\n\n\ntype TwoSampleMeanInferior \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nTwo sample non-inferiority test for Mean\n\n\nConstructors\n\n\n\n\nTwoSampleMeanInferior(mu1::Real, mu2::Real, k::Real, delta::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: Mean of group 1\n\n\nmu2\n: Mean of group 2\n\n\nk\n: Allocation ratio of the groups, k = n(group1) / n(group 2)\n\n\ndelta\n: Non-inferiority Margin\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu2\n\n\nk\n\n\ndelta\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.TwoSampleMeanSuperior\n \n \nType\n.\n\n\ntype TwoSampleMeanSuperior \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nTwo sample superiority test for Mean\n\n\nConstructors\n\n\n\n\nTwoSampleMeanSuperior(mu1::Real, mu2::Real, k::Real, delta::Real, stdunknown::Bool)\n\n\n\n\nArguments\n\n\n\n\nmu1\n: Mean of group 1\n\n\nmu2\n: Mean of group 2\n\n\nk\n: Allocation ratio of the groups, k = n(group1) / n(group 2)\n\n\ndelta\n: Superiority Margin\n\n\nstdunknown\n: If the population standard deviation is known, default = false,\n\n\n\n\nwhen the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used\n\n\nFields\n\n\n\n\nmu1\n\n\nmu2\n\n\nk\n\n\ndelta\n\n\nstdunknown\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.TwoSampleProp\n \n \nType\n.\n\n\ntype TwoSampleProp \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nTwo sample test for proportion\n\n\nConstructors\n\n\n\n\nTwoSampleProp(p1::Real, p2::Real, k::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: Proportion of group 1\n\n\np2\n: Proportion of group 2\n\n\nk\n: Allocation ratio of the groups, k = n(group1) / n(group 2)\n\n\n\n\nFields\n\n\n\n\np1\n\n\np2\n\n\nk\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.TwoSamplePropEqual\n \n \nType\n.\n\n\ntype TwoSamplePropEqual \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nTwo sample equivalence test for proportion\n\n\nConstructors\n\n\n\n\nTwoSamplePropEqual(p1::Real, p2::Real, k::Real, delta::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: Proportion of group 1\n\n\np2\n: Proportion of group 2\n\n\nk\n: Allocation ratio of the groups, k = n(group1) / n(group 2)\n\n\ndelta\n: Superiority Margin\n\n\n\n\nFields\n\n\n\n\np1\n\n\np2\n\n\nk\n\n\ndelta\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.TwoSamplePropInferior\n \n \nType\n.\n\n\ntype TwoSamplePropInferior \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nTwo sample non-inferiority test for proportion\n\n\nConstructors\n\n\n\n\nTwoSamplePropInferior(p1::Real, p2::Real, k::Real, delta::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: Proportion of group 1\n\n\np2\n: Proportion of group 2\n\n\nk\n: Allocation ratio of the groups, k = n(group1) / n(group 2)\n\n\ndelta\n: Non-inferiority Margin\n\n\n\n\nFields\n\n\n\n\np1\n\n\np2\n\n\nk\n\n\ndelta\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.TwoSamplePropSuperior\n \n \nType\n.\n\n\ntype TwoSamplePropSuperior \n: ClinicalTrialSampleSize.TrialTest\n\n\n\n\nTwo sample superiority test for proportion\n\n\nConstructors\n\n\n\n\nTwoSamplePropSuperior(p1::Real, p2::Real, k::Real, delta::Real)\n\n\n\n\nArguments\n\n\n\n\np1\n: Proportion of group 1\n\n\np2\n: Proportion of group 2\n\n\nk\n: Allocation ratio of the groups, k = n(group1) / n(group 2)\n\n\ndelta\n: Non-inferiority Margin\n\n\n\n\nFields\n\n\n\n\np1\n\n\np2\n\n\nk\n\n\ndelta\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.analytic_power\n \n \nMethod\n.\n\n\nanalytic_power(test)\n\n\n\n\nCompute the power of the trial without checking arguments, given the sample size, desired type I error rate and effect size.\n\n\nArguments\n\n\n\n\nTest\n \u2013 The test for calculating the power\n\n\nn\n \u2013 Sample size\n\n\nstd\n \u2013 Standard deviation\n\n\nalpha\n \u2013 Desired type I error rate\n\n\nside\n \u2013 Side of the test, \"two\" is two-sided, \"one\" is one-sided\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.power\n \n \nMethod\n.\n\n\npower(test)\n\n\n\n\nCompute the power of the trial, given the sample size, desired type I error rate and effect size.\n\n\nArguments\n\n\n\n\nTest\n \u2013 The test for calculating the power\n\n\nn\n \u2013 Sample size\n\n\nstd\n \u2013 Standard deviation\n\n\nalpha\n \u2013 Desired type I error rate\n\n\nside\n \u2013 Side of the test, \"two\" is two-sided, \"one\" is one-sided\n\n\n\n\nsource\n\n\n#\n\n\nClinicalTrialSampleSize.sample_size\n \n \nMethod\n.\n\n\nsample_size(test)\n\n\n\n\nCompute the minimum sample size needed for the desired power, type I error rate and effect size\n\n\nArguments\n\n\n\n\nTest\n \u2013 The test for calculating the power\n\n\nstd\n \u2013 Standard deviation\n\n\npower\n \u2013 Power\n\n\nalpha\n \u2013 Desired type I error rate\n\n\nside\n \u2013 Side of the test, \"two\" is two-sided, \"one\" is one-sided\n\n\n\n\nsource", 
            "title": "Command"
        }, 
        {
            "location": "/man/command/#index", 
            "text": "ClinicalTrialSampleSize.CrossoverMean  ClinicalTrialSampleSize.McNemarProp  ClinicalTrialSampleSize.OneSampleMean  ClinicalTrialSampleSize.OneSampleMeanEqual  ClinicalTrialSampleSize.OneSampleMeanInferior  ClinicalTrialSampleSize.OneSampleMeanSuperior  ClinicalTrialSampleSize.OneSampleProp  ClinicalTrialSampleSize.OneSamplePropEqual  ClinicalTrialSampleSize.OneSamplePropInferior  ClinicalTrialSampleSize.OneSamplePropSuperior  ClinicalTrialSampleSize.TwoSampleMean  ClinicalTrialSampleSize.TwoSampleMeanEqual  ClinicalTrialSampleSize.TwoSampleMeanInferior  ClinicalTrialSampleSize.TwoSampleMeanSuperior  ClinicalTrialSampleSize.TwoSampleProp  ClinicalTrialSampleSize.TwoSamplePropEqual  ClinicalTrialSampleSize.TwoSamplePropInferior  ClinicalTrialSampleSize.TwoSamplePropSuperior  ClinicalTrialSampleSize.analytic_power  ClinicalTrialSampleSize.power  ClinicalTrialSampleSize.sample_size   #  ClinicalTrialSampleSize.CrossoverMean     Type .  type CrossoverMean  : ClinicalTrialSampleSize.TrialTest  Crossover design, test for mean  Constructors   CrossoverMean(mu1::Real, mu2::Real, stdunknown::Bool)   Arguments   mu1 : Mean of group 1  mu2 : Mean of group 2  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu2  stdunknown   source  #  ClinicalTrialSampleSize.McNemarProp     Type .  type McNemarProp  : ClinicalTrialSampleSize.TrialTest  Paired sample test for proportion  Constructors   McNemarProp(p1::Real, p2::Real)   Arguments   p1 : Proportion for cell of no event - event  p2 : Proportion for cell of event - no event   Fields   p1  p2   source  #  ClinicalTrialSampleSize.OneSampleMean     Type .  type OneSampleMean  : ClinicalTrialSampleSize.TrialTest  One sample test for mean  Constructors   OneSampleMean(mu1::Real, mu0::Real, stdunknown::Bool)   Arguments   mu1 : True mean  mu0 : Mean under null hypothesis  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu0  stdunknown   source  #  ClinicalTrialSampleSize.OneSampleMeanEqual     Type .  type OneSampleMeanEqual  : ClinicalTrialSampleSize.TrialTest  One sample equivalence test for mean  Constructors   OneSampleMeanEqual(mu1::Real, mu0::Real, delta::Real, stdunknown::Bool)   Arguments   mu1 : True mean  mu0 : Mean under null hypothesis  delta : Superiority Margin  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu0  delta  stdunknown   source  #  ClinicalTrialSampleSize.OneSampleMeanInferior     Type .  type OneSampleMeanInferior  : ClinicalTrialSampleSize.TrialTest  One sample non-inferiority test for mean  Constructors   OneSampleMeanInferior(mu1::Real, mu0::Real, delta::Real, stdunknown::Bool)   Arguments   mu1 : True mean  mu0 : Mean under null hypothesis  delta : Non-inferiority margin  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu0  delta  stdunknown   source  #  ClinicalTrialSampleSize.OneSampleMeanSuperior     Type .  type OneSampleMeanSuperior  : ClinicalTrialSampleSize.TrialTest  One sample superiority test for Mean  Constructors   OneSampleMeanSuperior(mu1::Real, mu0::Real, delta::Real, stdunknown::Bool)   Arguments   mu1 : True mean  mu0 : Mean under null hypothesis  delta : Superiority margin  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu0  delta  stdunknown   source  #  ClinicalTrialSampleSize.OneSampleProp     Type .  type OneSampleProp  : ClinicalTrialSampleSize.TrialTest  One sample test for proportion  Constructors   OneSampleProp(p1::Real, p0::Real)   Arguments   p1 : True proportion  p0 : Proportion under null hypothesis   Fields   p1  p0   source  #  ClinicalTrialSampleSize.OneSamplePropEqual     Type .  type OneSamplePropEqual  : ClinicalTrialSampleSize.TrialTest  One sample equivalence test for proportion  Constructors   OneSamplePropEqual(p1::Real, p0::Real, delta::Real)   Arguments   p1 : True proportion  p0 : Proportion under null hypothesis  delta : Superiority Margin   Fields   p1  p0  delta   source  #  ClinicalTrialSampleSize.OneSamplePropInferior     Type .  type OneSamplePropInferior  : ClinicalTrialSampleSize.TrialTest  One sample non-inferiority test for proportion  Constructors   OneSamplePropInferior(p1::Real, p0::Real, delta::Real)   Arguments   p1 : True proportion  p0 : Proportion under null hypothesis  delta : Non-inferiority margin   Fields   p1  p0  delta   source  #  ClinicalTrialSampleSize.OneSamplePropSuperior     Type .  type OneSamplePropSuperior  : ClinicalTrialSampleSize.TrialTest  One sample superiority test for proportion  Constructors   OneSamplePropSuperior(p1::Real, p0::Real, delta::Real)   Arguments   p1 : True proportion  p0 : Proportion under null hypothesis  delta : Superiority margin   Fields   p1  p0  delta   source  #  ClinicalTrialSampleSize.TwoSampleMean     Type .  type TwoSampleMean  : ClinicalTrialSampleSize.TrialTest  two sample test for mean  Constructors   TwoSampleMean(mu1::Real, mu2::Real, k::Real, stdunknown::Bool)   Arguments   mu1 : Mean of group 1  mu2 : Mean of group 2  k : Allocation ratio of the groups, k = n(group1) / n(group 2)  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu2  k  stdunknown   source  #  ClinicalTrialSampleSize.TwoSampleMeanEqual     Type .  type TwoSampleMeanEqual  : ClinicalTrialSampleSize.TrialTest  Two sample equivalence test for mean  Constructors   TwoSampleMeanEqual(mu1::Real, mu2::Real, k::Real, delta::Real, stdunknown::Bool)   Arguments   mu1 : Mean of group 1  mu2 : Mean of group 2  k : Allocation ratio of the groups, k = n(group1) / n(group 2)  delta : Non-inferiority/Superiority Margin  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu2  k  delta  stdunknown   source  #  ClinicalTrialSampleSize.TwoSampleMeanInferior     Type .  type TwoSampleMeanInferior  : ClinicalTrialSampleSize.TrialTest  Two sample non-inferiority test for Mean  Constructors   TwoSampleMeanInferior(mu1::Real, mu2::Real, k::Real, delta::Real, stdunknown::Bool)   Arguments   mu1 : Mean of group 1  mu2 : Mean of group 2  k : Allocation ratio of the groups, k = n(group1) / n(group 2)  delta : Non-inferiority Margin  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu2  k  delta  stdunknown   source  #  ClinicalTrialSampleSize.TwoSampleMeanSuperior     Type .  type TwoSampleMeanSuperior  : ClinicalTrialSampleSize.TrialTest  Two sample superiority test for Mean  Constructors   TwoSampleMeanSuperior(mu1::Real, mu2::Real, k::Real, delta::Real, stdunknown::Bool)   Arguments   mu1 : Mean of group 1  mu2 : Mean of group 2  k : Allocation ratio of the groups, k = n(group1) / n(group 2)  delta : Superiority Margin  stdunknown : If the population standard deviation is known, default = false,   when the population parameter is known, the power / sample size are calculated based on a standard normal distribution, otherwise a t distribution will be used  Fields   mu1  mu2  k  delta  stdunknown   source  #  ClinicalTrialSampleSize.TwoSampleProp     Type .  type TwoSampleProp  : ClinicalTrialSampleSize.TrialTest  Two sample test for proportion  Constructors   TwoSampleProp(p1::Real, p2::Real, k::Real)   Arguments   p1 : Proportion of group 1  p2 : Proportion of group 2  k : Allocation ratio of the groups, k = n(group1) / n(group 2)   Fields   p1  p2  k   source  #  ClinicalTrialSampleSize.TwoSamplePropEqual     Type .  type TwoSamplePropEqual  : ClinicalTrialSampleSize.TrialTest  Two sample equivalence test for proportion  Constructors   TwoSamplePropEqual(p1::Real, p2::Real, k::Real, delta::Real)   Arguments   p1 : Proportion of group 1  p2 : Proportion of group 2  k : Allocation ratio of the groups, k = n(group1) / n(group 2)  delta : Superiority Margin   Fields   p1  p2  k  delta   source  #  ClinicalTrialSampleSize.TwoSamplePropInferior     Type .  type TwoSamplePropInferior  : ClinicalTrialSampleSize.TrialTest  Two sample non-inferiority test for proportion  Constructors   TwoSamplePropInferior(p1::Real, p2::Real, k::Real, delta::Real)   Arguments   p1 : Proportion of group 1  p2 : Proportion of group 2  k : Allocation ratio of the groups, k = n(group1) / n(group 2)  delta : Non-inferiority Margin   Fields   p1  p2  k  delta   source  #  ClinicalTrialSampleSize.TwoSamplePropSuperior     Type .  type TwoSamplePropSuperior  : ClinicalTrialSampleSize.TrialTest  Two sample superiority test for proportion  Constructors   TwoSamplePropSuperior(p1::Real, p2::Real, k::Real, delta::Real)   Arguments   p1 : Proportion of group 1  p2 : Proportion of group 2  k : Allocation ratio of the groups, k = n(group1) / n(group 2)  delta : Non-inferiority Margin   Fields   p1  p2  k  delta   source  #  ClinicalTrialSampleSize.analytic_power     Method .  analytic_power(test)  Compute the power of the trial without checking arguments, given the sample size, desired type I error rate and effect size.  Arguments   Test  \u2013 The test for calculating the power  n  \u2013 Sample size  std  \u2013 Standard deviation  alpha  \u2013 Desired type I error rate  side  \u2013 Side of the test, \"two\" is two-sided, \"one\" is one-sided   source  #  ClinicalTrialSampleSize.power     Method .  power(test)  Compute the power of the trial, given the sample size, desired type I error rate and effect size.  Arguments   Test  \u2013 The test for calculating the power  n  \u2013 Sample size  std  \u2013 Standard deviation  alpha  \u2013 Desired type I error rate  side  \u2013 Side of the test, \"two\" is two-sided, \"one\" is one-sided   source  #  ClinicalTrialSampleSize.sample_size     Method .  sample_size(test)  Compute the minimum sample size needed for the desired power, type I error rate and effect size  Arguments   Test  \u2013 The test for calculating the power  std  \u2013 Standard deviation  power  \u2013 Power  alpha  \u2013 Desired type I error rate  side  \u2013 Side of the test, \"two\" is two-sided, \"one\" is one-sided   source", 
            "title": "Index"
        }
    ]
}